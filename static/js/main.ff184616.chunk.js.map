{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","a","console","log","mintCharacterNFT","mintTxn","wait","warn","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","getCharacters","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","alert","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","TWITTER_HANDLE","TWITTER_LINK","GITHUB_HANDLE","GITHUB_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","txn","href","target","rel","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff184616.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0xe607154C413Fd7DEeeC00F8de8e05050a8B765eA';\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n\tconst [characters, setCharacters] = useState([]);\n\tconst [gameContract, setGameContract] = useState(null);\n\tconst [mintingCharacter, setMintingCharacter] = useState(false);\n\n\t// Render Methods\n\tconst renderCharacters = () =>\n\t\tcharacters.map((character, index) => (\n\t\t\t<div className=\"character-item\" key={character.name}>\n\t\t\t\t<div className=\"name-container\">\n\t\t\t\t\t<p>{character.name}</p>\n\t\t\t\t</div>\n\t\t\t\t<img src={character.imageURI} alt={character.name} />\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"character-mint-button\"\n\t\t\t\t\tonClick={mintCharacterNFTAction(index)}\n\t\t\t\t>{`Mint ${character.name}`}</button>\n\t\t\t</div>\n\t\t));\n\n\t// Actions\n\tconst mintCharacterNFTAction = (characterId) => async () => {\n\t\ttry {\n\t\t\tif (gameContract) {\n\t\t\t\tsetMintingCharacter(true);\n\t\t\t\tconsole.log('Minting character in progress...');\n\t\t\t\tconst mintTxn = await gameContract.mintCharacterNFT(characterId);\n\t\t\t\tawait mintTxn.wait();\n\t\t\t\tconsole.log('mintTxn:', mintTxn);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.warn('MintCharacterAction Error:', error);\n\t\t\tsetMintingCharacter(false);\n\t\t}\n\t};\n\n\t// UseEffect\n\tuseEffect(() => {\n\t\tconst { ethereum } = window;\n\n\t\tif (ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst gameContract = new ethers.Contract(\n\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\tmyEpicGame.abi,\n\t\t\t\tsigner\n\t\t\t);\n\n\t\t\t/*\n\t\t\t * This is the big difference. Set our gameContract in state.\n\t\t\t */\n\t\t\tsetGameContract(gameContract);\n\t\t} else {\n\t\t\tconsole.log('Ethereum object not found');\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst getCharacters = async () => {\n\t\t\ttry {\n\t\t\t\tconsole.log('Getting contract characters to mint');\n\n\t\t\t\tconst charactersTxn = await gameContract.getAllDefaultCharacters();\n\t\t\t\tconsole.log('charactersTxn:', charactersTxn);\n\n\t\t\t\tconst characters = charactersTxn.map((characterData) =>\n\t\t\t\t\ttransformCharacterData(characterData)\n\t\t\t\t);\n\n\t\t\t\tsetCharacters(characters);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Something went wrong fetching characters:', error);\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t * Add a callback method that will fire when this event is received\n\t\t */\n\t\tconst onCharacterMint = async (sender, tokenId, characterIndex) => {\n\t\t\tconsole.log(\n\t\t\t\t`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n\t\t\t);\n\t\t\talert(\n\t\t\t\t`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n\t\t\t);\n\t\t\t/*\n\t\t\t * Once our character NFT is minted we can fetch the metadata from our contract\n\t\t\t * and set it in state to move onto the Arena\n\t\t\t */\n\t\t\tif (gameContract) {\n\t\t\t\tconst characterNFT = await gameContract.checkIfUserHasNFT();\n\t\t\t\tconsole.log('CharacterNFT: ', characterNFT);\n\t\t\t\tsetCharacterNFT(transformCharacterData(characterNFT));\n\t\t\t}\n\t\t};\n\n\t\tif (gameContract) {\n\t\t\tgetCharacters();\n\n\t\t\t/*\n\t\t\t * Setup NFT Minted Listener\n\t\t\t */\n\t\t\tgameContract.on('CharacterNFTMinted', onCharacterMint);\n\t\t}\n\n\t\treturn () => {\n\t\t\t/*\n\t\t\t * When your component unmounts, let;s make sure to clean up this listener\n\t\t\t */\n\t\t\tif (gameContract) {\n\t\t\t\tgameContract.off('CharacterNFTMinted', onCharacterMint);\n\t\t\t}\n\t\t};\n\t}, [gameContract]);\n\n\treturn (\n\t\t<div className=\"select-character-container\">\n\t\t\t<h2>Mint Your Hero. Choose wisely.</h2>\n\t\t\t{/* Only show this when there are characters in state */}\n\t\t\t{characters.length > 0 && (\n\t\t\t\t<div className=\"character-grid\">{renderCharacters()}</div>\n\t\t\t)}\n\t\t\t{mintingCharacter && (\n\t\t\t\t<div className=\"loading\">\n\t\t\t\t\t<div className=\"indicator\">\n\t\t\t\t\t\t<LoadingIndicator />\n\t\t\t\t\t\t<p>Minting In Progress...</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n\t\t\t\t\t\talt=\"Minting loading indicator\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\nimport './Arena.css';\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n\t// State\n\tconst [gameContract, setGameContract] = useState(null);\n\t/*\n\t * State that will hold our boss metadata\n\t */\n\tconst [boss, setBoss] = useState(null);\n\t/*\n\t * We are going to use this to add a bit of fancy animations during attacks\n\t */\n\tconst [attackState, setAttackState] = useState('');\n\tconst [showToast, setShowToast] = useState(false);\n\n\t// UseEffects\n\tuseEffect(() => {\n\t\tconst fetchBoss = async () => {\n\t\t\tconst bossTxn = await gameContract.getBigBoss();\n\t\t\tconsole.log('Boss:', bossTxn);\n\t\t\tsetBoss(transformCharacterData(bossTxn));\n\t\t};\n\n\t\t/*\n\t\t * Setup logic when this event is fired off\n\t\t */\n\t\tconst onAttackComplete = (newBossHp, newPlayerHp) => {\n\t\t\tconst bossHp = newBossHp.toNumber();\n\t\t\tconst playerHp = newPlayerHp.toNumber();\n\n\t\t\tconsole.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n\t\t\t/*\n\t\t\t * Update both player and boss Hp\n\t\t\t */\n\t\t\tsetBoss((prevState) => {\n\t\t\t\treturn { ...prevState, hp: bossHp };\n\t\t\t});\n\n\t\t\tsetCharacterNFT((prevState) => {\n\t\t\t\treturn { ...prevState, hp: playerHp };\n\t\t\t});\n\t\t};\n\n\t\tif (gameContract) {\n\t\t\tfetchBoss();\n\t\t\tgameContract.on('AttackComplete', onAttackComplete);\n\t\t}\n\n\t\t/*\n\t\t * Make sure to clean up this event when this component is removed\n\t\t */\n\t\treturn () => {\n\t\t\tif (gameContract) {\n\t\t\t\tgameContract.off('AttackComplete', onAttackComplete);\n\t\t\t}\n\t\t};\n\t}, [gameContract]);\n\n\t// UseEffects\n\tuseEffect(() => {\n\t\tconst { ethereum } = window;\n\n\t\tif (ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst gameContract = new ethers.Contract(\n\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\tmyEpicGame.abi,\n\t\t\t\tsigner\n\t\t\t);\n\n\t\t\tsetGameContract(gameContract);\n\t\t} else {\n\t\t\tconsole.log('Ethereum object not found');\n\t\t}\n\t}, []);\n\n\tconst runAttackAction = async () => {\n\t\ttry {\n\t\t\tif (gameContract) {\n\t\t\t\tsetAttackState('attacking');\n\t\t\t\tconsole.log('Attacking boss...');\n\t\t\t\tconst attackTxn = await gameContract.attackBoss();\n\t\t\t\tawait attackTxn.wait();\n\t\t\t\tconsole.log('attackTxn:', attackTxn);\n\t\t\t\tsetAttackState('hit');\n\t\t\t\tsetShowToast(true);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetShowToast(false);\n\t\t\t\t}, 5000);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Error attacking boss:', error);\n\t\t\tsetAttackState('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"arena-container\">\n\t\t\t{boss && characterNFT && (\n\t\t\t\t<div id=\"toast\" className={showToast ? 'show' : ''}>\n\t\t\t\t\t<div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{/* Boss */}\n\t\t\t{boss && (\n\t\t\t\t<div className=\"boss-container\">\n\t\t\t\t\t<div className={`boss-content ${attackState}`}>\n\t\t\t\t\t\t<h2>🔥 {boss.name} 🔥</h2>\n\t\t\t\t\t\t<div className=\"image-content\">\n\t\t\t\t\t\t\t<img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n\t\t\t\t\t\t\t<div className=\"health-bar\">\n\t\t\t\t\t\t\t\t<progress value={boss.hp} max={boss.maxHp} />\n\t\t\t\t\t\t\t\t<p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"attack-container\">\n\t\t\t\t\t\t<button className=\"cta-button\" onClick={runAttackAction}>\n\t\t\t\t\t\t\t{`💥 Attack ${boss.name}`}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t{attackState === 'attacking' && (\n\t\t\t\t\t\t<div className=\"loading-indicator\">\n\t\t\t\t\t\t\t<LoadingIndicator />\n\t\t\t\t\t\t\t<p>Attacking ⚔️</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* Replace your Character UI with this */}\n\t\t\t{characterNFT && (\n\t\t\t\t<div className=\"players-container\">\n\t\t\t\t\t<div className=\"player-container\">\n\t\t\t\t\t\t<h2>Your Character</h2>\n\t\t\t\t\t\t<div className=\"player\">\n\t\t\t\t\t\t\t<div className=\"image-content\">\n\t\t\t\t\t\t\t\t<h2>{characterNFT.name}</h2>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={characterNFT.imageURI}\n\t\t\t\t\t\t\t\t\talt={`Character ${characterNFT.name}`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"health-bar\">\n\t\t\t\t\t\t\t\t\t<progress value={characterNFT.hp} max={characterNFT.maxHp} />\n\t\t\t\t\t\t\t\t\t<p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"stats\">\n\t\t\t\t\t\t\t\t<h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Arena;\n","import React, { useState, useEffect } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport { ethers } from 'ethers';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst GITHUB_HANDLE = 'Kn0wn-Un';\nconst GITHUB_LINK = `https://github.com/${GITHUB_HANDLE}`;\n\nconst App = () => {\n\t/*\n\t * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n\t */\n\tconst [currentAccount, setCurrentAccount] = useState(null);\n\n\tconst [characterNFT, setCharacterNFT] = useState(null);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\t/*\n\t * Since this method will take some time, make sure to declare it as async\n\t */\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log('Make sure you have MetaMask!');\n\t\t\t\tsetIsLoading(false);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log('We have the ethereum object', ethereum);\n\n\t\t\t\t/*\n\t\t\t\t * Check if we're authorized to access the user's wallet\n\t\t\t\t */\n\t\t\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\t\t\t/*\n\t\t\t\t * User can have multiple authorized accounts, we grab the first one if its there!\n\t\t\t\t */\n\t\t\t\tif (accounts.length !== 0) {\n\t\t\t\t\tconst account = accounts[0];\n\t\t\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\t\t\tsetCurrentAccount(account);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('No authorized account found');\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\tsetIsLoading(false);\n\t};\n\t/*\n\t * Implement your connectWallet method here\n\t */\n\tconst connectWalletAction = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert('Get MetaMask!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Fancy method to request access to account.\n\t\t\t */\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: 'eth_requestAccounts',\n\t\t\t});\n\n\t\t\t/*\n\t\t\t * Boom! This should print out public address once we authorize Metamask.\n\t\t\t */\n\t\t\tconsole.log('Connected', accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t// Render Methods\n\tconst renderContent = () => {\n\t\tif (isLoading) {\n\t\t\treturn <LoadingIndicator />;\n\t\t}\n\t\t/*\n\t\t * Scenario #1\n\t\t */\n\t\tif (!currentAccount) {\n\t\t\treturn (\n\t\t\t\t<div className=\"connect-wallet-container\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n\t\t\t\t\t\talt=\"Monty Python Gif\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\t\t\t\tonClick={connectWalletAction}\n\t\t\t\t\t>\n\t\t\t\t\t\tConnect Wallet To Get Started\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\t/*\n\t\t\t * Scenario #2\n\t\t\t */\n\t\t} else if (currentAccount && !characterNFT) {\n\t\t\treturn <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n\t\t\t/*\n\t\t\t * If there is a connected wallet and characterNFT, it's time to battle!\n\t\t\t */\n\t\t} else if (currentAccount && characterNFT) {\n\t\t\treturn (\n\t\t\t\t<Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n\t\t\t);\n\t\t}\n\t};\n\tuseEffect(() => {\n\t\tsetIsLoading(true);\n\t\tcheckIfWalletIsConnected();\n\t}, []);\n\n\t/*\n\t * Add this useEffect right under the other useEffect where you are calling checkIfWalletIsConnected\n\t */\n\tuseEffect(() => {\n\t\t/*\n\t\t * The function we will call that interacts with out smart contract\n\t\t */\n\t\tconst fetchNFTMetadata = async () => {\n\t\t\tconsole.log('Checking for Character NFT on address:', currentAccount);\n\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst gameContract = new ethers.Contract(\n\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\tmyEpicGame.abi,\n\t\t\t\tsigner\n\t\t\t);\n\n\t\t\tconst txn = await gameContract.checkIfUserHasNFT();\n\t\t\tif (txn.name) {\n\t\t\t\tconsole.log('User has character NFT');\n\t\t\t\tsetCharacterNFT(transformCharacterData(txn));\n\t\t\t} else {\n\t\t\t\tconsole.log('No character NFT found');\n\t\t\t}\n\t\t\tsetIsLoading(false);\n\t\t};\n\n\t\t/*\n\t\t * We only want to run this, if we have a connected wallet\n\t\t */\n\t\tif (currentAccount) {\n\t\t\tconsole.log('CurrentAccount:', currentAccount);\n\t\t\tfetchNFTMetadata();\n\t\t}\n\t}, [currentAccount]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<p className=\"header gradient-text\">⚔️ Memeverse Wars! ⚔️</p>\n\t\t\t\t\t<p className=\"sub-text\">Team up to protect the Memeverse!</p>\n\t\t\t\t\t<div className=\"connect-wallet-container\">{renderContent()}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<span className=\"footer-text\">Built</span>\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={GITHUB_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`by @${GITHUB_HANDLE}`}</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`with @${TWITTER_HANDLE}`}</a>\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}